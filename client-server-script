#!/usr/bin/env bash
# -*- mode: perl; indent-tabs-mode: t; perl-indent-level: 4 -*-
# vim: autoindent tabstop=4 shiftwidth=4 expandtab softtabstop=4 filetype=bash

function exit_error() {
    local message=$1; shift
    local code=$1; shift
    echo -e "[ERROR]$message\n"
    echo "Exiting"
    if [ -z "$code" ]; then
        exit 1
    else
        exit $code
    fi
}

function do_roadblock() {
    local label=$1; shift
    local timeout=$1; shift
    local extra=$1; shift
    if [ -z "$label" ]; then
        exit_error "[ERROR]do_roadblock() label not provided"
    fi
    if [ -z "$timeout" ]; then
        exit_error "[ERROR]do_roadblock() timeout not provided"
    fi
    local cmd=""
    cmd="$cmd /usr/bin/roadblock.py --role=follower --redis-server=$roadblock_server"
    cmd="$cmd --timeout=$timeout --redis-password=$roadblock_passwd"
    cmd="$cmd --uuid=$roadblock_id:$label --follower-id=$cs_id $extra"
    if [ "$use_roadblock" == "1" ]; then
        echo "going to run this roadblock command: $cmd"
        local output=`$cmd 2>&1`
        local rc=$?
        echo $output
        if echo $output | grep -q -- "Received abort message from leader"; then
            rc=3
        fi
        if echo $output | grep -q -- "The roadblock has timed out"; then 
            rc=2
        fi
        if [ $rc -gt 0 ]; then
            echo "Roadblock exit code is non-zero: $rc"
        fi
        return $rc
    fi
    return 0
}

longopts="rickshaw-host:,rickshaw-run-dir:,endpoint-run-dir:,cs-id:,roadblock-server:"
longopts="${longopts},roadblock-passwd:,roadblock-id:"
opts=$(getopt -q -o "" --longoptions "$longopts" -n "getopt.sh" -- "$@");
if [ $? -ne 0 ]; then
    exit_error "\nUnrecognized option specified: $@\n\n"
fi
eval set -- "$opts";
while true; do
    case "$1" in
        --rickshaw-host)
            shift;
            rickshaw_host="$1"
            shift;
            ;;
        --rickshaw-run-dir)
            shift;
            rickshaw_run_dir=$1
            shift;
            ;;
        --cs-id)
            shift;
            cs_id="$1"
            shift;
            ;;
        --endpoint-run-dir)
            shift;
            endpoint_run_dir="$1"
            shift;
            ;;
        --roadblock-server)
            shift;
            roadblock_server="$1"
            shift;
            ;;
        --roadblock-passwd)
            shift;
            roadblock_passwd="$1"
            shift;
            ;;
        --roadblock-id)
            shift;
            roadblock_id="$1"
            shift;
            ;;
        --)
            shift;
            break;
           ;;
        *)
           exit_error "Unexpected argument [$1]"
           shift;
           break;
           ;;
    esac
done

if [ -z "$endpoint_run_dir" ]; then
    exit_error "The endpoint run directory (--endpoint-run-dir) was not defined"
fi
if [ -z "$cs_id" ]; then
    exit_error "The clien/server ID (--cs-id) was not defined"
fi
cs_dir="$endpoint_run_dir/$cs_id"
/bin/mkdir -p "$cs_dir" ||
    exit_error "Could not mkdir $cs_dir"
exec >$endpoint_run_dir/$cs_id/$cs_id-stderrout.txt
exec 2>&1

if [ -z "$rickshaw_host" ]; then
	exit_error "Exiting due to rickshaw host not being set"
fi

use_roadblock=1
if [ -z "$roadblock_server" ]; then
    echo "Cannot use roadblock for synchronizaton because a server was not provided"
    use_roadblock=0
fi
if [ -z "$roadblock_id" ]; then
    echo "Cannot use roadblock for synchronizaton because an ID was not provided"
    use_roadblock=0
fi
if [ -z "$roadblock_passwd" ]; then
    echo "Cannot use roadblock for synchronizaton because a password was not provided"
    use_roadblock=0
fi

do_roadblock client-server-script-start 300 ||
    exit_error "roablock for client-server-script-start timed out"
do_roadblock client-server-start-tools 300 ||
    exit_error "roablock for client-server-start-tools timed out"

# start tools here
echo -e "\nClients/servers starting tools"

testloop_abort_opt=" --abort 1"
pushd "$endpoint_run_dir" >/dev/null ||
    exit_error "Could not chdir to $endpoint_run_dir"
find . -mindepth 1 -maxdepth 1 -type f | grep -v -- "endpoint-std" | \
    cpio -pdum "$cs_dir" || 
    exit_error "Could not copy files from $endpoint_run_dir to $cs_dir with find & cpio"
pushd "$cs_dir" >/dev/null ||
    exit_error "Could not chdir to $cs_dir"

# Server may get overloaded with ssh requests so multuple attempts
# are supported
ssh_id_file="$endpoint_run_dir/rickshaw_id.rsa"
if [ ! -e $ssh_id_file ]; then
    exit_error "ssh key $ssh_id_file was not found"
fi
scp_attempts=1
scp_rc=1
while [ $scp_rc -gt 0 -a $scp_attempts -lt 5 ]; do
    scp -o StrictHostKeyChecking=no -i $ssh_id_file \
        $rickshaw_host:"$rickshaw_run_dir/client-server-commands/$cs_id" "$cs_id.cmds"
    scp_rc=$?
    echo "scp exit code: $scp_rc"
    if [ $scp_rc -gt 0 ]; then
        echo "Trying again to scp command file"
        sleep $scp_attempts
    fi
    let scp_attempts=$scp_attempts+1
done
if [ ! -e "$cs_id.cmds" ]; then
    exit_error "Could not copy $cs_id.cmds from $rickshaw_host"
fi
while read line; do
    echo "Processing this cmd: $line"
    iter_samp=`echo $line | awk '{print $1}'`
    cmd=`echo $line | sed -e s/^$iter_samp//`
    iter=`echo $iter_samp | awk -F- '{print $1}'`
    samp=`echo $iter_samp | awk -F- '{print $2}'`
    iter_samp_dir="$cs_dir/iteration-$iter/sample-$samp"
    mkdir -p $iter_samp_dir ||
        exit_error "Could not mkdir iteration-$iter/sample-$samp"
    find . -mindepth 1 -maxdepth 1 -type f | grep -v -- "$cs_id-log.txt" | \
        cpio -pdum iteration-$iter/sample-$samp/ ||
        exit_error "Could not copy files from $cs_dir to $iter_samp_dir with find & cpio"
    pushd $iter_samp_dir ||
        exit_error "Could not chdir to $iter_samp_dir"
    do_roadblock client-server-start-test:$iter-$samp 300
    rb_rc=$?
    echo roadblock start test exit code: $rb_rc
    if [ $rb_rc -eq 3 ]; then
        echo -e "\nNon-zero exit code from iteration $iter, sample $samp"
        echo -e "\nWill not run remaining tests\n"
        break
    fi
    if [ $rb_rc -eq 2 ]; then
        exit_error "roadblock for client-server-start-test:$iter-$samp timed out"
    fi
    echo -e "\nRunning iteration $iter, sample $samp"
    echo -e "Benchmark command: $cmd"
    $cmd
    if [ $? -gt 0 ]; then
        # An abort message must be sent so the other members know how to procede
        echo -e "\nNon-zero exit code from iteration $iter, sample $samp"
        do_roadblock "client-server-stop-test:$iter-$samp" "300" " --abort=1"
        echo -e "\nWill not run remaining tests\n"
        break
    else
        do_roadblock client-server-stop-test:$iter-$samp 300 || break
        rb_rc=$?
        echo roadblock start test exit code: $rb_rc
        if [ $rb_rc -eq 3 ]; then
            echo -e "\nNon-zero exit code from iteration $iter, sample $samp"
            echo -e "\nWill not run remaining tests\n"
            break
        fi
        if [ $rb_rc -eq 2 ]; then
            exit_error "roadblock for client-server-stop-test:$iter-$samp timed out"
        fi
    fi
    popd >/dev/null  # from $iter_sampl_dir back to $cs_dir
done < "$endpoint_run_dir/$cs_id/$cs_id.cmds"

do_roadblock client-server-stop-tools 300 ||
    exit_error "roadblock for client-server-stop-tools timed out"
echo -e "\nClients/servers stopping tools"
# stop-tools command here
do_roadblock client-server-send-data 300 ||
    exit_error "roadblock for client-server-send-data timed out"
echo -e "\nClients/servers copying data back to endpoint"
ssh_attempts=1
ssh_rc=1
pushd $cs_dir >/dev/null ||
    exit_error "Could not chdir to $cs_dir"
while [ $ssh_rc -gt 0 -a $ssh_attempts -lt 5 ]; do
    tar czf - . | ssh -o StrictHostKeyChecking=off -i "$endpoint_run_dir/rickshaw_id.rsa" \
        $rickshaw_host "dd of=$rickshaw_run_dir/$cs_id-data.tgz"
    ssh_rc=$?
    if [ $ssh_rc -gt 0 ]; then
        echo "Trying again to tar/ssh result data"
        sleep $ssh_attempts
    fi
    let ssh_attempts=$ssh_attempts+1
done
popd >/dev/null
if [ $ssh_rc -gt 0 ]; then
    exit_error "tar/ssh of client/server data to $rickshaw_host failed"
fi
popd >/dev/null
do_roadblock client-server-script-finish 300 || \
    exit_error "roadblock for client-server-script-finish timed out"
echo -e "\nAll client/server scripts are finished"
# /bin/rm -rf iteration-*
popd >/dev/null
