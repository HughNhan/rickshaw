#!/usr/bin/perl
# -*- mode: perl; indent-tabs-mode: t; perl-indent-level: 4 -*-
# vim: autoindent tabstop=4 shiftwidth=4 expandtab softtabstop=4 filetype=perl
#
# Author: Andrew Theurer
#
# Rickshaw will run a benhcmark for you.  Please see README.md for instructions.

use strict;
use warnings;
use Cwd;
use Data::UUID;
use File::pushd;
use File::Basename;
use File::Temp qw(tempdir);
use File::Copy;
use File::Path qw(make_path);
use JSON::XS;
use Data::Dumper;

my $ug = Data::UUID->new;
my %defaults = ( "num-samples" => 1, "tool-group" => "default", "test-order" => "s",
                 "run-dir" => tempdir(), "run-id" => $ug->create_str());

my $usrenv = "rhubi8";
my $debug = 0;
my $use_roadblock = 0;
my $use_workshop = 0;
my %bench_config;
my @endpoints;
my %run; # A multi-dimensional, nested hash, schema TBD
         # This hash documents what was run.
my $redis_passwd = "flubber"; # TODO: make this cmdline setting
my $rb_base_uuid = $run{'run-id'};
my $rb_bin = "/usr/bin/roadblock.py";
chomp (my $hostname = `hostname`);
my $base_rb_leader_cmd = $rb_bin . " --role=leader --redis-server=localhost --timeout=300" .
                         " --redis-password=" . $redis_passwd;
my $base_rb_follower_cmd = $rb_bin . " --role=follower --redis-server=localhost --timeout=300" .
                           " --redis-password=" . $redis_passwd . "\$abort_opt";

my $rickshaw_dir;
my $endpoint_roadblock_opt = "";
my $workshop_roadblock_opt = "";
{
    # Get the absolute path of the rickshaw project directory
    my $dir = pushd(dirname($0));
    $rickshaw_dir = getcwd();
}

sub usage {
    print "\nusage:\n\n";
    print "--workshop-dir  Directory where workshop project exists\n";
    print "--roadblock-dir Directory where workshop project exists\n";
    print "--bench-dir     Directory where benchmark helper project exists\n";
    print "--bench-params  File whith benchmark parameters to use\n";
    print "--num-samples   The number of sample exeuctions to run for each benchmark iteration\n";
    print "--test-order    's' = run all samples of an iteration first\n";
    print "                'i' = run all iterations of a sample first\n\n";
}

sub roadblock_leader_sync {
    if ($use_roadblock) {
        my $uuid_param = " --uuid=" . $run{'run-id'} . ":" . shift;
        my $message = shift;
        my $follower_param = "";
        while (scalar @_ > 0) {
            $follower_param .= " --followers=" . shift;
        }
        printf "Running roadblock for: %s\n", $message;
        my $cmd = $base_rb_leader_cmd . $uuid_param . $follower_param;
        debug_log(sprintf "roadblock leader command:%s\n", $cmd);
        my $output = `$cmd`;
        my $rc = $? & 127;
        debug_log($output);
        debug_log(sprintf "roadblock exit code: %d\n", $rc);
        # Becasue roadblock leader does not exit with right code
        if ( my $g_output = grep(/Exiting\swith\sabort/, $output) ) {
            printf "Found \"Exiting with abort:\"\n%s\n", $g_output;
            printf "%s\n", $output;
            $rc = 3;
        }
        if ( my $g_output = grep(/The\sroadblock\shas\stimed\sout/, $output) ) {
            printf "Found \"Exiting with timeout:\"\n%s\n", $g_output;
            printf "%s\n", $output;
            $rc = 2;
        }
        printf "Completed roadblock for: %s, return code %d\n", $message, $rc;
        return $rc;
    } else {
        return 0;
    }
}

sub debug_log {
    if ($debug) {
        print "[DEBUG]" . shift;
    }
}

sub dump_params {
    my $params_ref = shift;
    my $cs_id = shift;
    my $params_str = "";
    foreach my $param (@{ $params_ref }) {
        my $arg = $$param{'arg'}; 
        my $val = $$param{'val'};
        if (defined $cs_id) {
            $val =~ s/\%client-id\%/$cs_id/;
        }
            $params_str .= " --" . $arg . "=" . $val;
    }
    $params_str =~ s/^\s//;
    return $params_str;
}

sub put_json_file {
    my $filename = shift;
    my $json_ref = shift;
    my $coder = JSON::XS->new->canonical->pretty;
    debug_log(sprintf "trying to write [%s]\n", $filename);
    my $json_text = $coder->encode($json_ref);
    open(JSON_FH, ">" . $filename) || die("Could not open file $filename\n");
    printf JSON_FH "%s", $json_text;
    close JSON_FH;
}

sub get_json_file {
    my $filename = shift;
    my $coder = JSON::XS->new;
    debug_log(sprintf "trying to open [%s]\n", $filename);
    open(JSON_FH, $filename) || die("Could not open file $filename\n");
    my $json_text = "";
    while ( <JSON_FH> ) {
        $json_text .= $_;
    }
    close JSON_FH;
    my $perl_scalar = $coder->decode($json_text) || die "Could not read JSON";
    return $perl_scalar;
}

sub file_newer_than {
    my $file = shift;
    my $epoch_sec = shift;
    {
        chomp(my $file_time=`/bin/ls -l --time-style=+%s $file`);
        # -rwxrwxr-x. 1 atheurer atheurer 4656 1582742663 client-server-script
        if ($file_time =~ /\S+\s+\S+\s+\S+\s+\S+\s+\S+\s+(\d+)\s+.*/) {
            if ($1 > $epoch_sec) {
                return 1;
            }
        }
    }
    return 0;
}

# Apply envinronment variables
foreach my $e (qw(RS_USER RS_EMAIL RS_TAGS RS_DESC)) {
    if (exists $ENV{$e}) {
        my $var = ($e =~ s/^RS_//);
        $run{$var} = $ENV{$e};
    }
}

# Process the cmdline params
while (scalar @ARGV > 0) {
    my $p = shift @ARGV;
    debug_log(sprintf "processing \@ARGV, param: [%s]\n", $p);
    my $arg;
    my $val;

    if ( $p =~ /^\-\-(\S+)/ ) {
        $arg = $1;
        if ( $arg =~ /^(\S+)=(.*)/ ) { # '--arg=val'
            $arg = $1;
            $val = $2;
        } else { # '--arg val'
            $val = shift @ARGV;
        }
    } else {
        print "[ERROR]malformed cmdline parameter: %s\n";
        usage;
        exit 1;
    }
    debug_log(sprintf "processing \@ARGV, arg is: [%s], val is: [%s]\n", $arg, $val);
    if ($arg eq "endpoint") {
        push(@endpoints, $val);
    } elsif ($arg =~ /^help$/) {
        usage;
        exit 0;
    } elsif ($arg =~ /^run-id$|^run-dir$|^workshop-dir$|^bench-dir$|^roadblock-dir$|^bench-params$/ or
             $arg =~ /^test-order$|^tool-group$|^num-samples$|^name$|^email$|^tags$|^desc$/) {
        debug_log(sprintf "argument: [%s]\n", $arg);
        $run{$arg} = $val;
    } else {
        printf "[ERROR]argument not valid: [%s]\n", $arg;
        usage;
        exit 1;
    }
}
if (defined $run{'roadblock-dir'} and -e $run{'roadblock-dir'} . "/roadblock.py") {
    $use_roadblock = 1;
}
if (defined $run{'workshop-dir'} and -e $run{'workshop-dir'} . "/workshop.pl") {
    $use_workshop = 1;
}

# Load the bench config and user params
exists $run{'bench-dir'} || die "[ERROR]You must use --bench-dir=/path/to/benchmark-subproject\n";
my $bench_config_file = $run{'bench-dir'} . "/rickshaw.json";
if (-e $bench_config_file) {
    my $bench_config_ref = get_json_file($bench_config_file);
    %bench_config = %{ $bench_config_ref };
    if (exists $bench_config{'benchmark'}) {
        printf "Preparing to run %s\n", $bench_config{'benchmark'};
        $run{'benchmark'} = $bench_config{'benchmark'};
    } else {
        print "[ERROR]benchmark was not defined in %s\n", $bench_config_file;
        exit 1;
    }
} else {
    printf "[ERROR]benchmark subproject config file %s was not found\n", $bench_config_file;
    exit 1;
}
exists $run{'bench-params'} || die "[ERROR}You must use " .
                                   "--bench-params=/path/to/benchmark-params.json\n";
my @param_sets = @{ my $param_sets_ref = get_json_file($run{'bench-params'}) };
# TODO: verify user params schema
$run{'iterations'} = ();
my $iter_id = 0;
for my $params (@param_sets) {
    $run{'iterations'}[$iter_id]{'params'} = $params;
    $iter_id++;
}

# Apply defaults
foreach my $p (keys %defaults) {
    if (! exists $run{$p}) {
        debug_log(sprintf "applying default value [%s] for %s\n", $defaults{$p}, $p);
        $run{$p} = $defaults{$p};
    }
}

# Ensure the bench-dir and run-dir have absolute paths
for my $dirtype (qw(run-dir bench-dir)) {
    {
        my $dir = pushd($run{$dirtype});
        debug_log(sprintf "pushd to [%s]\n", $run{$dirtype});
        my $cwd = getcwd();
        debug_log(sprintf "cwd [%s]\n", $cwd);
        $run{$dirtype} = $cwd;
    }
}
-e $run{'run-dir'} || mkdir($run{'run-dir'});
printf "Run directory: [%s]\n", $run{'run-dir'};
printf "Bench directory: [%s]\n", $run{'bench-dir'};

# If there are no endpoints, assume 1 endpoint using the 'local' extension
if (scalar @endpoints == 0) {
    if (exists $bench_config{'client'} and exists $bench_config{'server'}) {
        push(@endpoints, "local:client[1],server[1]");
    } else {
        push(@endpoints, "local:client[1]");
    }
}

# Call each endpoint script with "--validate" as the first option, and each endpoint script should
# return a list of clients and servers which are used from this endpoint.  Collect this output
# and verify there are no gaps in the numbering of clients, and if the benchmark uses servers,
# that there is 1 server for every client.
# Why can't we just parse the endpoint option?  Because there is no gaurantee that the endpoint
# option always contains the client and server IDs that will be used.  For example, an endpoint
# for k8s might look like: "--endpoint:[1-5]" where client and server are not required, and when
# not used, this endpoint assumes both clients and servers (for IDs 1-5) will be deployed. 
# This ensures the format of the specific endpoint option string is completely up to that endpoint
# and not rickshaw.
my %clients_servers;
my @rb_cs_ids; # unique IDs for roadblock
my $min_id;
my $max_id;
printf "Confirming the endpoints will satisfy the benchmark-client ";
printf "and benchmark-server " if exists $bench_config{'server'};
printf "requirements\n";
foreach my $endpoint (@endpoints) {
    if ($endpoint =~ /(^\w+),(.+$)/) {
        my $type = $1;
        my $opts = $2;
        my $dir = pushd("./endpoints/" . $type);
        my $cmd = "./" . $type .
                  " --endpoint-opts=" . $opts .
                  " --validate";
        debug_log(sprintf "endopoint validation command: [%s]\n", $cmd);
        my @output = `$cmd`;
        # Output from endpoint's validation should be 1 or more lines with "client" or "server"
        # followed by 1 or more positive integers representing the client/server IDs this
        # endpoint handles::
        # client <int> [int]
        # server <int> [int]
        foreach my $line (@output) {
            chomp $line;
            if ($line =~ /(client|server)\s+(.+)$/) {
                my $t = $1;
                my $ids = $2;
                foreach my $id (split(/\s+/, $ids)) {
                    die "[ERROR]client/server ID cannot be below 1\n" if ($id < 1);
                    my %info = ( 'endpoint-type' => $type, 'id' => $id );
                    $clients_servers{$t}[$id - 1] = \%info;
                    push(@rb_cs_ids, $t . "-" . $id);
                    $min_id = $id if (! defined $min_id or $id < $min_id);
                    $max_id = $id if (! defined $max_id or $id > $max_id);
                }
            } else {
                printf "[ERROR]output from endpoint validation incorrect:\n%s\n", $line;
                exit 1;
            }
        }
    } else {
        printf "[ERROR]endpoint value is not valid: [%s]\n", $endpoint;
        exit 1;
    }
}
if ($min_id != 1) {
    printf "[ERROR]lowest ID found in clients and servers is %d, must be 1\n", $min_id;
    exit 1;
}
for (my $id = $min_id; $id <= $max_id; $id++) {
    debug_log(sprintf "checking for client ID %d\n", $id);
    if (! defined $clients_servers{'client'}[$id - 1]) {
        printf "[ERROR]client ID %d is not defined in ID range %d - %d\n", $id, $min_id, $max_id;
        exit 1;
    }
    if (exists $bench_config{'server'}) {
        debug_log(sprintf "checking for server ID %d\n", $id);
        if (! defined $clients_servers{'server'}[$id - 1]) {
            printf "[ERROR]server ID %d is not defined in ID range %d - %d\n",
                   $id, $min_id, $max_id;
            exit 1;
        }
    } else {
        debug_log(sprintf "checking for no server IDs\n");
        if (defined $clients_servers{'server'}[$id - 1]) {
            printf "[ERROR]server ID %d is defined in ID range %d - %d, but this benchmark " .
                   "does not use servers\n", $id, $min_id, $max_id;
            exit 1;
        }
    }
}
printf "There will be %d client(s)", $max_id;
printf " and server(s)" if exists $bench_config{'server'};
printf "\n";

if ($use_roadblock) {
    $endpoint_roadblock_opt = " --roadblock-server=" . $hostname .
                              " --roadblock-id=" . $run{'run-id'} .
                              " --roadblock-passwd=" . $redis_passwd;
    $workshop_roadblock_opt = " --requirements " . $run{'roadblock-dir'} .
                              "/workshop.json";
} else {
    # If for some reason the user has opted to not use roadblock, then only allow
    # tests which use only one client and no server, which is the only possible
    # combination we can support without syncronization
    my $do_exit = 0;
    if (scalar @{ $clients_servers{'server'} } > 0) {
        printf "[ERROR}since --roadblock-dir was not used or the directory does not exist," .
               "rickshaw cannot run a test with servers because it cannot syncornize the test " .
               "without roadblock.\n";
               $do_exit = 1;
    }
    if (scalar @{ $clients_servers{'client'} } > 1) {
        printf "[ERROR}since --roadblock-dir was not used or the directory does not exist," .
               "rickshaw cannot run a test with multiple clients because it cannot synchronize " .
               "the test without roadblock.\n";
               $do_exit = 1;
    }
    if ($do_exit) {
        exit 1;
    }
}


$run{'endpoints'} = \@endpoints;

printf "Building test execution order\n";
# Build test execution order (and the iteration/sample dirs)
my @tests;
if ($run{'test-order'} eq 's') {
    for (my $iid = 1; $iid <= scalar @{ $run{'iterations'} }; $iid++) {
        for (my $sid = 1; $sid <= $run{'num-samples'}; $sid++) {
            my %test = ('iteration-id' => $iid, 'sample-id' => $sid);
            push(@tests, \%test);
        }
    }
} elsif ($run{'test-order'} eq 'i') {
    for (my $sid = 1; $sid <= $run{'num-samples'}; $sid++) {
        for (my $iid = 1; $iid <= scalar @{ $run{'iterations'} }; $iid++) {
            my %test = ('iteration-id' => $iid, 'sample-id' => $sid);
            push(@tests, \%test);
        }
    }
} else {
    printf "[ERROR]Value for --test-order [%s] is not valid\n", $run{'test-order'};
    usage;
    exit 1;
}

# Run on the controller (the host running this script) the benchmark-specific "pre-script"
if (exists $bench_config{"controller"}{"pre-script"} and $bench_config{"controller"}{"pre-script"} ne "") {
    my $dir = pushd($run{'run-dir'});
    # Note that the user params for the benchmark are from the first set only
    # This pre-script is run only once before all of the tests are started.
    # If this script generates a file to aid in benchmark execution (such as a job file),
    # The file should work for all perams sets (all benchmark iterations).  If you need
    # different job files per iteration, then use the client or server-side "pre-script"
    # to either augment a file generated here or create a completely new file.
    my $cmd = $bench_config{"controller"}{"pre-script"} . " " . dump_params($run{'iterations'}[0]{'params'});
    $cmd =~ s/\%bench-dir\%/$run{'bench-dir'}/g;
    $cmd =~ s/\%run-dir\%/$run{'run-dir'}/g;
    debug_log(sprintf "controller pre-script command: [%s]\n", $cmd);
    my $pre_cmd_output = `$cmd . '2>&1'`;
    debug_log(sprintf "controller pre-script output:\n%s\n", $pre_cmd_output);
}

# All data needed for any endpoint to run is copied to the endpoint run directory.
# If workshop is used, then this directory will be included in the image.
# If workshop is not used, then the endpoint can copy data from here to its
# own endpoint run directory, which has the same name as its options, like "local:clients:1".
my $base_endpoint_run_dir = $run{'run-dir'} . "/endpoint-run/";
mkdir($base_endpoint_run_dir);
copy($rickshaw_dir . "/client-server-script", $base_endpoint_run_dir . "/client-server-script")
    || die "Could not copy client-server-script to " . $base_endpoint_run_dir . "/client-server-script";
chmod 0755, $base_endpoint_run_dir . "/client-server-script";
# Build the client and server benchmark-command files and put them in the base endpoint run dir
my $cs_cmds_dir = $run{'run-dir'} . "/client-server-commands";
-e $cs_cmds_dir || mkdir($cs_cmds_dir) ||
    die "[ERROR]Could not create directory for endpoint scripts: [" . $cs_cmds_dir . "]\n";
foreach my $cs_type (keys %clients_servers) {
    foreach my $cs_ref (@{ $clients_servers{$cs_type} }) {
        my $cs_id = $$cs_ref{'id'};
        my $cs_type_id = $cs_type . "-" . $cs_id;
        my $cmd_file = $cs_cmds_dir . "/" . $cs_type_id;
        open(FH, ">" . $cmd_file) || die "[ERROR]could not open cmd file for writing: ["
                                            . $cmd_file . "]\n";
        debug_log(sprintf "writing script file [%s]\n", $cmd_file);
        foreach my $test_ref (@tests) {
            my $test_iter = $$test_ref{'iteration-id'};
            my $test_samp = $$test_ref{'sample-id'};
            #my $param_id = $test_iter - 1;
            my $iter_array_idx = $test_iter - 1;
            my $rb_session = "start-test:" . $test_iter . "-" . $test_samp;
            if (exists $bench_config{$cs_type}{"bin"} and
            $bench_config{$cs_type}{"bin"} ne "") {
                my $cmd = $bench_config{$cs_type}{"bin"} . " " . dump_params($run{'iterations'}[$iter_array_idx]{'params'}, $cs_id);
                debug_log(sprintf "cmd: [%s]\n", $cmd);
                # Apply a regex from the benchmark config file to the command
                    # This is used to remove things like "--clients=" because the
                # native benchmark does not understand this parameter
                if ($bench_config{$cs_type} and $bench_config{$cs_type}{"param_regex"}) {
                    for my $r (@{ $bench_config{$cs_type}{"param_regex"} }) {
                        # to apply the 's/x/y/' regex from the file, some eval trickery is necessary
                        # todo: first test the $r regex separately for [perl syntax] errors with eval
                        # before doing below
                        $cmd = eval "\$_='$cmd'; $r; return scalar \$_";
                    }
                }
                printf FH "%d-%d %s\n", $test_iter, $test_samp, $cmd;
            } else {
                die "[ERROR]Could not find client binary in bench_config\n";
            }
        }
        close FH;
        chmod 0755, $cmd_file;
    }
}


my $endpoint_image_opt = "";
if ($use_workshop) {
    my $image_id;
    # First determine if we need to build a new image
    my $must_rebuild = 0;
    my $image_time;
    my $image_name = "workshop_" . $usrenv . "_" . $run{'benchmark'};
    my $image_json = `buildah  images --json $image_name`;
    my $coder = JSON::XS->new;
    my $image_json_ref = $coder->decode($image_json);
    for (my $i=0; $i< scalar @$image_json_ref ; $i++) {
        my $name = $$image_json_ref[$i]{'names'}[0];
        $name =~ s/.*\///;
        $name =~ s/:.*//;
        if ($name eq $image_name) {
            $image_id = $$image_json_ref[$i]{'id'};
            $image_time = $$image_json_ref[$i]{'createdatraw'};
            $image_time = `date -d $image_time +%s`;
            my @files = ($run{'bench-dir'} . "/workshop.json",
                         $run{'workshop-dir'} . "/targets/" . $usrenv . ".json",
                         $rickshaw_dir . "/client-server-script");
            for my $file (@files) {
                if ( file_newer_than($file, $image_time) > 0) {
                    printf "%s is newer than the container image\n", $file;
                    $must_rebuild = 1;
                }
            }
        }
    }
    if ($must_rebuild) {
        printf "The container image must be rebuilt\n";
        # Build a container image for the clients/servers
        # Create a json which tells workshop to include these files:
        # - the client-server-script (which has logic to execute all tests)
        # - the roadblock client script (which the client-server-script uses)
        #
        # We want to avoid adding content to the image that changes
        # with each invocation of rickshaw because we want to cache
        # these images [eventually].  So, we shouold not include anything
        # like "client-server-commands" because this changes every time
        # rickshaw is run.
        my $cs_req_file = $run{'run-dir'} . "/cs-req.json";
        my %cs_req = (  'targets' => {
                            'default' => {
                                'packages' => [
                                    'endpoint-run'
                                ]
                            }
                        },
                        'packages' => {
                            'endpoint-run' => {
                                'type' => 'files',
                                'files_info' => {
                                    'type' => 'local-copy',
                                    # At this point only the client-server-script
                                    # is in this $base_endpoint_run_dir, which is all
                                    # we need, but we want the $base_endpoint_run_dir
                                    # created [on the image as "/endpoint-run"].
                                    'src' => $base_endpoint_run_dir,
                                    'dst' => '/'
                                }
                            }
                        }
                    );
        if ($use_roadblock) {
            push(@{ $cs_req{'targets'}{'default'}{'packages'} }, 'roadblock-script');
            $cs_req{'packages'}{'roadblock-script'} ={ 
                'type' => 'files',
                'files_info' => {
                    'type' => 'local-copy',
                    'src' => $run{'roadblock-dir'} . "/roadblock.py",
                    'dst' => '/usr/bin'
                }
            };
        }

        put_json_file($cs_req_file, \%cs_req);
        # Building an image must include requiremetns from rickshaw, one benchmark,
        # and optionally one or more tools and roadblock.
        # TODO: only build when existing image is not found in registry
        my $workshop_cmd = $run{'workshop-dir'} . "/workshop.pl" .
                        " --label " . $run{'benchmark'} .
                        " --target " . $run{'workshop-dir'} . "/targets/rhubi8.json" .
                        " --requirements " . $run{'bench-dir'} . "/workshop.json" .
                        " --requirements " . $cs_req_file .
                        $workshop_roadblock_opt; 
        printf "workshop cmd: %s\n", $workshop_cmd;
        my @workshop_output = `$workshop_cmd`;
        print join("", @workshop_output);
        # Becasue there can be a lot of non-JSON debug/info stuff in the output before the
        # actual JSON, find the JSON by starting at the end and scanning backwards
        my $workshop_json = "";
        for (my $i = scalar @workshop_output - 1; $i > 0; $i--) {
            $workshop_json = $workshop_output[$i] . $workshop_json;
            # Break out if we found all of the JSON
            # In this case the JSON begins with an array '['
            last if ($workshop_output[$i] eq "[\n");
        }
        my $coder = JSON::XS->new;
        my $workshop_ref = $coder->decode($workshop_json);
        $image_id = $$workshop_ref[0]{'id'};
    }
    $endpoint_image_opt = " --image-id=" . $image_id;
    printf "workshop image id: %s\n", $image_id;
}

# Create temporary ssh keys so endpoint clients/servers can pull/push data
my $keygen_cmd = 'ssh-keygen -f ' . $run{'run-dir'} . '/rickshaw_id.rsa -P "" 2>&1';
my $keygen_output = `$keygen_cmd`;
system('cat ' . $run{'run-dir'} . '/rickshaw_id.rsa.pub >>/root/.ssh/authorized_keys');

# Deploy ths endpoints so they are ready to run benchmark and tools
print "Deploying endpoints\n";
debug_log(sprintf "\nendpoint output:\n");
foreach my $endpoint (@endpoints) {
    my $this_endpoint_run_dir = $base_endpoint_run_dir . "/" . $endpoint;
    mkdir($this_endpoint_run_dir);
    die if ! -e $this_endpoint_run_dir;
    (my $type, my $endpoint_opts) = ($endpoint =~ /(\w+),(.*)/);
    if (-e $rickshaw_dir . "/endpoints/" . $type) {
        my $dir = pushd($rickshaw_dir . "/endpoints/" . $type);
        my $cmd = "./" . $type .
                  " --endpoint-opts=" . $endpoint_opts .
                  " --run-id=" . $run{'run-id'} .
                  " --rickshaw-run-dir=" . $run{'run-dir'} .
                  $endpoint_image_opt .
                  $endpoint_roadblock_opt .
                  #. " " . $cs_cmds_dir
                  " >" . $this_endpoint_run_dir . "/endpoint-stdout.txt" .
                  " 2>" . $this_endpoint_run_dir . "/endpoint-stderr.txt";
        # The below 'system' needs to be forked, then wait for all to finish.
        # The endpoint program should get all clients/servers "ready", that is,
        # waiting for instructions from roadblock.  The above command needs
        # info about how to contact roadblock.
        # Endpoints should return for each client and server started:
        # - the ID of the client/server
        # - the roadblock client ID
        printf "Going to run endpoint command:\n%s\n\n", $cmd;
        if ($endpoint_roadblock_opt eq "") {
            # There is only one client and no synchronization, so we wait for the endpoint to finish
            debug_log(sprintf "going to run and wait for: %s\n", $cmd);
            system($cmd);
        } else {
            debug_log(sprintf "going to run %s\n", $cmd);
            system($cmd . " &");
        }
    } else {
        printf "[ERROR]could not find endpoint ./endpoints/%s\n", $type;
        exit 1;
    }
}
if (roadblock_leader_sync("endpoint-deploy", "Deploying endpoints", @endpoints) > 0) {
    printf "[ERROR]roadblock failed\n";
    exit 1;
}

# Cycle through the list of tests using roadblock to kick them off
for my $sync (qw(client-server-script-start client-server-start-tools)) {
    if (roadblock_leader_sync($sync, $sync, (@rb_cs_ids, @endpoints)) > 0) {
        printf "[ERROR]roadblock failed, exiting\n";
        exit 1;
    }
}
my $abort_test_id;
for (my $tid = 0; $tid < scalar @tests; $tid++) {
    my $iter_id = $tests[$tid]{'iteration-id'};
    my $samp_id = $tests[$tid]{'sample-id'};
    my $iter_array_idx = $iter_id - 1;
    my $test_id = $iter_id . "-" . $samp_id;
    my $rc = roadblock_leader_sync("client-server-start-test:" . $test_id,
                                   "Starting test ". $test_id, (@rb_cs_ids, @endpoints));
    if ($rc > 0) {
        if ($rc == 2) {
            printf "[ERROR]Abort from last start-test so breaking out of test-loop\n";
            last;
        } else {
            printf "[ERROR]roadblock failed, exiting\n";
        }
    }
    printf "Clients/servers starting test number %d: iteration %d, sample %d\n",
           $tid + 1, $iter_id, $samp_id;
    $rc = roadblock_leader_sync("client-server-stop-test:" . $test_id,
                                "Stopping test " . $test_id, (@rb_cs_ids, @endpoints));
    if ($rc > 0) {
        if ($rc == 2) {
            printf "[ERROR]Abort from last stop-test so breaking out of test-loop\n";
            last;
        } else {
            printf "[ERROR]roadblock failed, exiting\n";
        }
    }
}
for my $sync (qw(client-server-stop-tools client-server-send-data client-server-script-finish)) {
    if (roadblock_leader_sync($sync, $sync, (@rb_cs_ids, @endpoints)) > 0) {
        printf "[ERROR]roadblock failed, exiting\n";
        exit 1;
    }
}
for my $sync (qw(endpoint-move-data endpoint-finish endpoint-really-finish)) {
    if (roadblock_leader_sync($sync, $sync, @endpoints) > 0) {
        printf "[ERROR]roadblock failed, exiting\n";
        exit 1;
    }
}
print "Post-processing data\n";
# Organize the data from the clients into a common directory structure, organized by
# iteration, then by sample, then finally by client/server.  This is needed to have
# the benchmark's postprocessing script work.  Also background the post-process script
# for each test and wait for them to complete.
opendir(my $dh, $run{'run-dir'});
my @data_archives = grep(/^(client|server)-(\d+)-data\.tgz$/, readdir($dh));
my $pp_cmd = $bench_config{'controller'}{'post-script'};
$pp_cmd =~ s/\%bench-dir\%/$run{'bench-dir'}\//g;
$pp_cmd =~ s/\%run-dir\%/$run{'run-dir'}\//g;
my @pids;
close $dh;
{
    mkdir($run{'run-dir'} . "/tmp-data-dir");
    my $dir = pushd($run{'run-dir'} . "/tmp-data-dir");
    foreach my $archive (@data_archives) {
        $archive =~ /^(client|server)-(\d+)-data\.tgz$/ or continue;
        my $cs_type = $1;
        my $cs_id = $2;
        my $tar_cmd = "tar zxf ../" . $archive;
        my $tar_output = `$tar_cmd`;
        for (my $i = 1; $i <= scalar @{ $run{'iterations'} }; $i++) {
            my $iter_params = dump_params($run{'iterations'}[$i - 1]{'params'});
            for (my $s = 1; $s <= $run{'num-samples'}; $s++) {
                my $cs_path = "/iteration-" . $i . "/sample-" . $s . "/clients/" . $cs_id;
                make_path($run{'run-dir'} . $cs_path);
                my $iter_sampl_dir = pushd("iteration-" . $i . "/sample-" . $s);
                my $mv_cmd = "/bin/mv * " . $run{'run-dir'} . $cs_path;
                my $mv_output = `$mv_cmd`;
                if (my $pid = fork) {
                    push(@pids, $pid);
                } else {
                    my $dir = pushd($run{'run-dir'} . $cs_path);
                    system($pp_cmd . " " . $iter_params);
                    exit;
                }
            }
        }
        #if (!$debug) {
        #system("/bin/rm ../" . $archive);
        #}
    }
    rmdir($run{'run-dir'} . "/tmp-data-dir/*");
    system("/bin/rm -rf " . $run{'run-dir'} . "/tmp-data-dir/*");
    system("/bin/ls " . $run{'run-dir'} . "/tmp-data-dir");
}
printf "Waiting for %d per-client/server post-processing jobs to complete\n", scalar @pids;
while (wait() > -1) {
}
rmdir($run{'run-dir'} . "/tmp-data-dir/");

# TODO: remove temporary ssh keys from local authorized_keys file

put_json_file($run{'run-dir'} . "/rickshaw-run.json", \%run);

if (defined $abort_test_id) {
    printf "Run finished with only %d of %d tests\n", $abort_test_id, scalar @tests;
}
