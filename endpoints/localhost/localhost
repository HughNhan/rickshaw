#!/bin/bash
# vim: autoindent tabstop=4 shiftwidth=4 expandtab softtabstop=4 filetype=bash

# This script implements the 'local' endpoint for rickshaw.  It runs 1 or more
# clients and servers for as many benchmark interations/samples as required
# for a single invocation of rickshaw.
# 
# Usage:
# local [--validate] --endpoint-opts=client:n-m,o-p,server:n-m,o-p --run-dir --script-dir
#
# If --validate is used all options after client/server will be ignored
# If not using --validate script-dir and --run-dir are required
# The --run-id is rickshaw's run ID
# The --run-dir is rickshaw's current-working-directory,
# The --script-dir is where the client/server scripts are located
# where controller-generated files the endpoint might need will be located

this_endpoint_dir=$(dirname `readlink -e $0` | sed -e 'sX/binXX')
endpoint_base_dir=$(cd $this_endpoint_dir >/dev/null && cd .. && /bin/pwd)
if [ -e "$endpoint_base_dir/base" ]; then
    . "$endpoint_base_dir/base"
else
    echo "Could not find endpoint source file "$endpoint_base_dir/base", exiting"
    exit 1
    exit
fi

endpoint_name="local"
osruntime="chroot"
userenv="rhubi8"
cpu_partitioning=0

function cleanup_osruntime() {
    if [ "$osruntime" == "chroot" ]; then
        for fs in dev proc sys; do
            umount $container_mount/$fs
        done
        echo "Removing mount $container_name for chroot osruntime"
        buildah unmount "$container_name"
        echo "Removing container $container_name for chroot runtime"
        buildah rm "$container_name"
    fi
}

function process_localhost_opts() {
    local endpoint_opts="$1"
    local this_opt=""
    for this_opt in `echo $endpoint_opts | sed -e 's/,/ /g'`; do
        local arg=`echo $this_opt | awk -F: '{print $1}'`
        local val=`echo $this_opt | awk -F: '{print $2}'`
        case "$arg" in
            client|server|clients|servers)
                addto_clients_servers "$arg" "$val"
                ;;
            osruntime)
                case "$val" in
                    builtin|chroot)
                        osruntime=$val
                        ;;
                    *)
                        exit_error "osruntime $val not supported"
                        ;;
                esac
                ;;
            userenv)
                userenv=$val
                ;;
            cpu-partitioning)
                cpu_partitioning=$val
                ;;
            *)
                if echo $arg | grep -q -- "="; then
                    echo "You can't use a \"=\" for assignment in endpoint options"
                    echo "You must use \":\", like `echo $arg | sed -e 's/=/:/'`"
                fi
                exit_error "localhost endpoint option [$arg] not supported"
                ;;
        esac
    done
}

function localhost_req_check() {
    # Validation returns what clients and servers would be used and the userenv
    if [ "$do_validate" == 1 ]; then
        echo_clients_servers
        if [ "$osruntime" != "builtin" ]; then
            echo "userenv $userenv"
        fi
        exit
    fi
}

function launch_osruntime() {
    echo osruntime: $osruntime
    if [ "$osruntime" == "builtin" ]; then
        # Only the container images already have the bootstrap,
        # so we must copy ourselves
        /bin/cp $client_server_config_dir/bootstrap $bootstrap_script
        # All osruntimes need an ssh-key, but for osruntime "builtin" it can simply be copied here
        /bin/cp -f "$config_dir/rickshaw_id.rsa" /tmp/rickshaw_id.rsa
    elif [ "$osruntime" == "chroot" ]; then
        # Delete old container if there is one
        existing_container=`buildah containers --format "{{.ContainerName}}" | grep $endpoint_label`
        if [ ! -z "$existing_container" ]; then
            buildah rm $endpoint_label
        fi
        echo "Adding mount for chroot osruntime"
        container_name=`buildah from --name $endpoint_label $image`
        if [ "$container_name" == "$endpoint_label" ]; then
            container_mount=`buildah mount "$container_name"`
            echo "container mount: $container_mount"
            for fs in dev proc sys; do
                mount --verbose --options bind /$fs $container_mount/$fs
            done
            endpoint_run_dir=$container_mount/endpoint-run
            # for chroot osruntime we can also simply copy the ssh key
            /bin/cp -f "$config_dir/rickshaw_id.rsa" $container_mount/tmp/rickshaw_id.rsa
            /bin/cp -f /etc/hosts "$container_mount/etc/"
            /bin/cp -f /etc/resolv.conf "$container_mount/etc/"
        fi
    fi

    # For each client and server launch the actual script which will run it.
    for this_cs_label in ${clients[@]} ${servers[@]}; do
        this_cs_log_file="$client_server_logs_dir/$this_cs_label.txt"
        base_cmd="$bootstrap_script"
        base_cmd+=" --rickshaw-host=localhost"
        base_cmd+=" --endpoint-run-dir=$endpoint_run_dir"
        base_cmd+=" --cs-label=$this_cs_label"
        base_cmd+=" $cs_rb_opts"
        base_cmd+=" --base-run-dir=$base_run_dir"
        base_cmd+=" --endpoint=remotehost"
        base_cmd+=" --osruntime=$osruntime"
        base_cmd+=" --max-sample-failures=$max_sample_failures"
        base_cmd+=" --cpu-partitioning=$cpu_partitioning"
        if [ "$osruntime" == "builtin" ]; then
            cmd="$base_cmd"
            if [ -e "$bootstrap_script" ]; then
                if [ -z "$cs_rb_opts" ]; then
                    # Only when not using roadblock run the client in the foreground
                    echo -e "About to run in foreground:\n$cmd\n"
                    $cmd 2>&1 | tee "$this_cs_log_file"
                else
                    echo -e "About to run using nohup:\n$cmd\n"
                    nohup $cmd 2>&1 >"$this_cs_log_file" &
                fi
            else
                exit_error "[ERROR]could not find script $bootstrap_script"
            fi
        elif [ "$osruntime" == "chroot" ]; then
            echo "using chroot"
            # Note that --endpoint-run value must be hard-coded to /endpoint-run becaue of chroot
            cmd="chroot $container_mount $base_cmd"
            if [ -z "$cs_rb_opts" ]; then
                # Only when not using roadblock run the client in the foreground
                $cmd | tee "$this_cs_log_file"
            else
                echo -e "About to run using nohup:\n$cmd\n"
                nohup $cmd >"$this_cs_log_file" &
            fi
        fi
    done
    echo "This endpiont deployed"
}

process_opts $@
process_localhost_opts $endpoint_opts
init_common_dirs
localhost_req_check
base_req_check
launch_osruntime
process_prebench_roadblocks
process_bench_roadblocks
process_postbench_roadblocks
process_final_roadblocks
