#!/usr/bin/perl
# -*- mode: perl; indent-tabs-mode: nil; perl-indent-level: 4 -*-
# vim: autoindent tabstop=4 shiftwidth=4 expandtab softtabstop=4 filetype=perl

use strict;
use warnings;
use Data::Dumper;
use Time::Local;

BEGIN {
    if (!(exists $ENV{'TOOLBOX_HOME'} && -d "$ENV{'TOOLBOX_HOME'}/perl")) {
        print "This script requires libraries that are provided by the toolbox project.\n";
        print "Toolbox can be acquired from https://github.com/perftool-incubator/toolbox and\n";
        print "then use 'export TOOLBOX_HOME=/path/to/toolbox' so that it can be located.\n";
        exit 1;
    }
}
use lib "$ENV{'TOOLBOX_HOME'}/perl";
use toolbox::run;

my $ssh_opts = '';
my $remotehost = '';
my $max_cache_size = 3;
my $debug = 0;
my %images;

while (scalar(@ARGV) > 0) {
    my $p = shift;
    my $arg;
    my $val;

    if ( $p =~ /^\-\-(\S+)/ ) {
        $arg = $1;
        if ( $arg =~ /^(\S+)=(.*)/ ) { # '--arg=val'
            $arg = $1;
            $val = $2;
        } else { # '--arg val'
            $val = shift @ARGV;
        }
    } else {
        print "ERROR: malformed cmdline parameter: %s\n";
        exit 1;
    }

    if ($arg eq 'remote-host') {
        $remotehost = $val;
    } elsif ($arg eq 'cache-size') {
        $max_cache_size = $val;
    } elsif ($arg eq 'debug') {
        $debug = $val;
    }
}

if ($remotehost eq '') {
    print "ERROR: you must define --remote-host!\n";
    exit 1;
}

if (exists($ENV{'ssh_opts'})) {
    $ssh_opts = $ENV{'ssh_opts'};
    if ($debug) {
        print "Picked up 'ssh_opts' value from environment variable: $ssh_opts\n";
    }
}

print "Collecting remote host image census information...";
if (open(FH, "ssh $ssh_opts $remotehost 'cat /var/lib/crucible/remotehost-container-image-census'|")) {
    while (<FH>) {
        my @fields = split(/\s/, $_);
        my $image_name = $fields[0];
        my $image_timestamp = $fields[1];

        push(@{$images{'rickshaw'}{$image_name}{'timestamps'}}, $image_timestamp);
        $images{'rickshaw'}{$image_name}{'cached'} = 0;
    }

    close(FH);
} else {
    print "ERROR: failed to obtain container image census!\n";
    exit 1;
}
print "done\n";

dump_images();

print "Collecting remote host image cache information...";
if (open(FH, "ssh $ssh_opts $remotehost 'podman images --format=\"{{.Repository}}:{{.Tag}}|{{.CreatedAt}}\"'|")) {
    while (<FH>) {
        chomp($_);
        my @fields = split(/\|/, $_);
        $images{'podman'}{$fields[0]}{'created'} = gmtimestamp_to_gmepoch($fields[1]);
    }

    close(FH);
} else {
    print "ERROR: failed to obtain podman images list!\n";
    exit 1;
}
print "done\n";

dump_images();

my $image_expiration = image_expiration_gmepoch();
if ($debug) {
    printf "Images created before %d will be considered expired.\n", $image_expiration;
}

foreach my $image (keys %{$images{'rickshaw'}}) {
    #print "rickshaw image=$image\n";

    if (! exists($images{'podman'}{$image})) {
        if ($debug) {
            print "rickshaw image '$image' is no longer present in podman images, removing from consideration\n";
        }
        delete $images{'rickshaw'}{$image};
        next;
    }

    # ensure timestamps are in order
    @{ $images{'rickshaw'}{$image}{'timestamps'} } = sort(@{ $images{'rickshaw'}{$image}{'timestamps'} });

    # calculate total uses
    $images{'rickshaw'}{$image}{'uses'} = scalar(@{ $images{'rickshaw'}{$image}{'timestamps'} });

    # determine the most recent usage
    $images{'rickshaw'}{$image}{'latest-usage'} = $images{'rickshaw'}{$image}{'timestamps'}[$images{'rickshaw'}{$image}{'uses'} - 1];

    # remove timestamps array, data is extraneous now
    delete $images{'rickshaw'}{$image}{'timestamps'};
}

dump_images();

foreach my $image (keys %{$images{'podman'}}) {
    #print "podman image=$image\n";

    if ($image !~ /client-server/) {
        if ($debug) {
            print "podman image '$image' is a not a client-server image, ignoring\n";
        }
        next;
    }

    if (! exists($images{'rickshaw'}{$image})) {
        print "podman image '$image' is not present in rickshaw container image census, removing it from the image cache\n";
        delete $images{'podman'}{$image};
        remove_image($remotehost, $image);
    } elsif ($images{'podman'}{$image}{'created'} < $image_expiration) {
        print "podman image '$image' has expired, removing it from the image cache\n";
        delete $images{'podman'}{$image};
        delete $images{'rickshaw'}{$image};
        remove_image($remotehost, $image);
    } else {
        if ($debug) {
            print "podman image '$image' is valid and remains under consideration\n";
        }
    }
}

dump_images();

my $cache_size = 0;

# cache the most recently used image first, if possible
foreach my $image (sort { $images{'rickshaw'}{$b}{'latest-usage'} <=> $images{'rickshaw'}{$a}{'latest-usage'} } keys %{ $images{'rickshaw'} }) {
    if ($debug) {
        printf "\n%s %d %d\n", $image, $images{'rickshaw'}{$image}{'uses'}, $images{'rickshaw'}{$image}{'latest-usage'};
    }

    if ($cache_size < $max_cache_size) {
        $cache_size++;
        $images{'rickshaw'}{$image}{'cached'} = 1;
        print "rickshaw image '$image' is being preserved in the image cache due to last used\n";
    }

    # only process the last used image
    last;
}

dump_images();

# sort descending by uses
foreach my $image (sort { $images{'rickshaw'}{$b}{'uses'} <=> $images{'rickshaw'}{$a}{'uses'} } keys %{ $images{'rickshaw'} }) {
    if ($debug) {
        printf "\n%s %d %d\n", $image, $images{'rickshaw'}{$image}{'uses'}, $images{'rickshaw'}{$image}{'latest-usage'};
    }

    if ($images{'rickshaw'}{$image}{'cached'} == 1) {
        if ($debug) {
            print "skipping rickshaw image '$image' because it is already in the image cache\n";
        }
        next;
    }
    
    if ($cache_size < $max_cache_size) {
        $cache_size++;
        $images{'rickshaw'}{$image}{'cached'} = 1;
        print "rickshaw image '$image' is being preserved in the image cache based on usage\n";
    } else {
        print "rickshaw image '$image' is being purged from the image cache because the cache is full\n";
        delete $images{'podman'}{$image};
        delete $images{'rickshaw'}{$image};
        remove_image($remotehost, $image);
    }
}

dump_images();

printf "Image cache usage: %d of %d\n", $cache_size, $max_cache_size;

exit;

sub remove_image {
    my $host = shift;
    my $image = shift;

    print "\nremove_image:\n";
    (my $cmd, my $cmd_output, my $cmd_rc) = run_cmd("ssh $ssh_opts $host 'podman rmi $image'");
    if ($cmd_rc != 0) {
        printf("ERROR: command '%s' returned %d with output:\n%s\n\n", $cmd, $cmd_rc, $cmd_output)
    } else {
        printf("command '%s' succeeded with output:\n%s\n\n", $cmd, $cmd_output);
    }
}

sub gmtimestamp_to_gmepoch {
    my $timestamp = shift;

    my @timestamp_fields = split(/\s+/, $timestamp);

    my @date_fields = split(/-/, $timestamp_fields[0]);
    
    my @time_fields = split(/:/, $timestamp_fields[1]);

    return timegm($time_fields[2], $time_fields[1], $time_fields[0],
                  $date_fields[2], $date_fields[1] - 1, $date_fields[0]);
}

sub image_expiration_gmepoch {
    #                         seconds/min   minutes/hour   hours/day   days
    return timegm(gmtime()) - 60          * 60           * 24        * 14;
}

sub dump_images {
    if ($debug) {
        print "\n";
        print Dumper \%images;
        print "\n";
    }
}
