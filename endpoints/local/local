#!/usr/bin/env bash
# vim: autoindent tabstop=4 shiftwidth=4 expandtab softtabstop=4 filetype=bash

# This script implements the 'local' endpoint for rickshaw.  It runs 1 or more
# clients and servers for as many benchmark interations/samples as required
# for a single invocation of rickshaw.
# 
# Things that work:
# -validation
# -launching the client/server script in a tmux
#
# Things that don't work or are missing:
# -not using a filesystenm image from workshop
#  -not using a workshop-provided filesystem-image or container-image to either:
#   -use podman to run a container, or
#   -mount the filesystem image (plus /proc & /sys) then chroot to it
#
# Usage:
# local [--validate] client[n-m,o-p],server[n-m,o-p] run-dir script-dir
#
# If --validate is used all options after client/server will be ignored
# If not using --validate script-dir and --run-dir are required
# The --run-dir tells this script what directory rickshaw's current-working-directory,
# The --script-dir tells this script where the client/server scripts are located
# where controller-generated files the endpoint might need will be located

function exit_error() {
    echo "$1"
    exit 1
}

function start_tmux() {
    session_id="$1"
    script="$2"
    if tmux list-sessions | awk -F: '{print $1}' | grep -q -- "$session_id"; then
        echo "killing existing tmux session $session_id"
        tmux kill-session -t "$session_id"
    fi
    tmux new -d -s "$session_id" "$script"
}

if [ "$1" == "--validate" ]; then
    shift
    do_validate=1
fi

# Next argument must be the endpoint options which determine the 
# clients and servers
endpoint_opts="$1"
shift
for i in `echo $endpoint_opts | sed -e 's/],/] /g'`; do
    type=`echo $i | awk -F[ '{print $1}'`
    range_ids=`echo $i | awk -F[ '{print $2}' | awk -F] '{print $1}'`

    for ids in `echo $range_ids | sed -e 's/,/ /'`; do
        if echo $ids | grep -q -- "-"; then
            range=`echo $ids | sed 's/-/ /'`
            for j in `seq $range`; do
                if [ "$type" == "client" ]; then
                    clients[$j]="client-$j"
                elif [ "$type" == "server" ]; then
                    servers[$j]="server-$j"
                fi
            done           
        else
            if [ "$type" == "client" ]; then
                clients[$ids]="client-$ids"
            elif [ "$type" == "server" ]; then
                servers[$ids]="server-$ids"
            fi
        fi
    done
done

# Validation just returns what clients and servers would be used
if [ "$do_validate" == 1 ]; then
    echo "client ${!clients[@]}"
    if [ ${#servers[@]} -gt 0 ]; then
        echo "server ${!servers[@]}"
    fi
    exit
fi

# The last argument is a directory where there is a script for each client [and server if used].
# The scripts are named client|server-<id>, and they will contain all of the commands to:
# -tell roadblock leader it is ready to run all the tests
# -wait for roadblock to tell it to start tools, then start tools
# -loop over the tests, for each test:
#  -wait for roadblock leader to tell it to start next test
#  -start next test
# -wait for roadblock leader to tell it stop tools, then stop tools
# -wait for roadblock leader to tell it to send all data back, then send data back
if [ -z "$1" ]; then
    exit_error "The run-directory ws not provided"
fi
rickshaw_run_dir=$1
shift
if [ ! -d "$rickshaw_run_dir" ]; then
    exit_error "The run directory [$rickshaw_run_dir] does not exist"
fi
if [ -z "$1" ]; then
    exit_error "The script-direcotry ws not provided"
fi
script_dir=$1
shift
if [ ! -d "$script_dir" ]; then
    exit_error "The script directory [$script_dir] does not exist"
fi

# For each client and server launch the actual script which will run it.
local_run_dir=`mktemp -d`
for i in ${clients[@]} ${servers[@]}; do
    cs_run_dir="$local_run_dir/$i"
    mkdir -p "$cs_run_dir" || exit_error "Could not create client/server run dir: [$cs_run_dir]"
    echo running $i in $cs_run_dir
    # Below is a HACK.  We should not copy everything from the rickshaw run_dir to the clients/servers
    # We should be using from the bench config JSON, controller.files-to-[client|server]
    pushd $rickshaw_run_dir >/dev/null || exit_error "Could not chdir to $rickshaw_run_dir"
    find . -mindepth 1 -maxdepth 1 -type f -print | cpio -pdumv "$cs_run_dir" || exit_error "Could not copy files from run dir to $i"
    popd >/dev/null
    script="$script_dir/$i"
    if [ -e "$script" ]; then
        echo "about to start $i"
        pushd "$cs_run_dir" >/dev/null ||
            exit_error "Could not pushd to client/server run dir: [$cs_run_dir]"
        start_tmux "$i" "$script" || exit_error "Failed to starte tmux"
        popd >/dev/null
    else
        echo "[ERROR]could not find script $script"
        exit 1
    fi
done
    
# At this point the endpoint is "deployed" and can exit
exit 0
